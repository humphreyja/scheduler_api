<?php

namespace AppBundle\Repository\Users;
use AppBundle\Repository\UserRepository;
use AppBundle\Entity\Users\Employee;
use AppBundle\Entity\WorkHistory;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * EmployeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeeRepository extends UserRepository
{

    /**
     * Finds all the other employees that have a shift that ends after the selected shift starts,
     * and starts before the selected shift ends. Basically, it gets all the shifts during that time.
     *
     * @param int $shiftId
     * @param int $employeeId
     *
     * @return Employee[]
     */
    public function workingDuringShift($shiftId, $employeeId)
    {
        // Build query.
        $query = $this->getEntityManager()
        ->createQuery(
            'SELECT employees
                FROM AppBundle\Entity\Users\Employee employees
             INNER JOIN AppBundle\Entity\Shift allShifts
                WITH allShifts.employeeId = employees.id
             JOIN AppBundle\Entity\Shift currentShift
                WITH currentShift.id = :currentShiftId
             WHERE
                currentShift.startTime < allShifts.endTime AND
                currentShift.endTime > allShifts.startTime AND
                allShifts.employeeId != :employeeId'
        )
        ->setParameter('employeeId', "$employeeId")
        ->setParameter('currentShiftId', "$shiftId");

        return $query->getResult();
    }

    /**
     * Returns a list by week of hours worked that week and the week date range.
     *
     * @param int $employeeId
     *
     * @return WorkHistory[]
     */
    public function getWorkHistory($employeeId)
    {
        // Construct a results mapper to map the custom query data to the WorkHistory class.
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('hours', 'hours', 'integer');
        $rsm->addScalarResult('weekStartDate', 'weekStartDate', 'datetime');
        $rsm->addScalarResult('weekEndDate', 'weekEndDate', 'datetime');

        // Build query
        $query = $this->getEntityManager()
        ->createNativeQuery(
            "SELECT
                SUM(HOUR(TIMEDIFF(end_time, start_time))) as hours,
                DATE_ADD(start_time, INTERVAL -(DAYOFWEEK(start_time) - 1) DAY) as weekStartDate,
                DATE_ADD(start_time, INTERVAL (-(DAYOFWEEK(start_time) - 1) + 6) DAY) as weekEndDate
            FROM shift
            WHERE shift.employee_id = :employeeId
            GROUP BY CONCAT(YEAR(start_time), '/', WEEK(start_time))", $rsm
        )
        ->setParameter('employeeId', "$employeeId");


        // Generate the list of work history
        $results = [];
        foreach($query->getResult() as $result)
        {
            $history = new WorkHistory();
            $history->setHours($result['hours']);
            $history->setWeekStartDate($result['weekStartDate']);
            $history->setWeekEndDate($result['weekEndDate']);
            array_push($results, $history);
        }
        return $results;
    }

    /**
     * Returns all shifts available to the employee, including unassigned shifts
     * that they could pick up
     *
     * @param int $employeeId
     *
     * @return Shift[]
     */
    public function getAllShifts($employeeId)
    {
        $query = $this->getEntityManager()
        ->createQuery(
          'SELECT shift
               FROM AppBundle\Entity\Shift shift
           WHERE
               shift.employeeId = :employeeId OR
               shift.employeeId IS NULL
           ORDER BY shift.startTime ASC'
        )
        ->setParameter('employeeId', "$employeeId");

        return $query->getResult();
    }
}
